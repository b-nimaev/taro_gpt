import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";

const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene("home", handler, async (ctx: rlhubContext) => await add_sentences_handler(ctx));

export async function greeting (ctx: rlhubContext, reply?: boolean) {

    let user: IUser | null = await User.findOne({ id: ctx.from?.id })

    if (user) {

        if (user.interface_language) {

            ctx.scene.session.interface_ln = user.interface_language

        } else {
            
            ctx.scene.session.interface_ln = 'russian'

        }

    }

    let keyboard_translates: any = {
        learns: {
            russian: '–°–∞–º–æ—É—á–∏—Ç–µ–ª—å',
            english: 'Learns',
            buryat: '–ó–∞–∞–±–∞—Ä–∏'
        },
        dictionary: {
            russian: '–°–ª–æ–≤–∞—Ä—å',
            english: 'Dictionary',
            buryat: '–¢–æ–ª–∏'
        },
        sentences: {
            russian: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
            english: 'Sentences',
            buryat: '–ú—ç–¥—É—É–ª—ç–ª–Ω—É–¥'
        },
        translator: {
            russian: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
            english: 'Translator',
            buryat: '–û—Ä—à—É—É–ª–≥–∞—Ä–∏'
        },
        moderation: {
            russian: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
            english: 'Moderation',
            buryat: '–ó–æ—Ö–∏—Å—É—É–ª–∞–ª'
        },
        dashboard: {
            russian: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            english: 'Dashboard',
            buryat: '–û–æ—Ä—ã–Ω —Ç–∞ha–≥'
        }
    }

    const extra: ExtraEditMessageText = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: keyboard_translates.learns[ctx.scene.session.interface_ln], callback_data: "study" },
                    { text: keyboard_translates.dictionary[ctx.scene.session.interface_ln], callback_data: "vocabular" }
                ],
                [{ text: keyboard_translates.sentences[ctx.scene.session.interface_ln], callback_data: 'sentences' }],
                [{ text: keyboard_translates.translator[ctx.scene.session.interface_ln], callback_data: 'translater' }],
                [{ text: keyboard_translates.moderation[ctx.scene.session.interface_ln], callback_data: 'moderation' }],
                [{ text: "üîì Chat GPT", callback_data: "chatgpt" }],
                // [{ text: "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "table" }],
                [{ text: keyboard_translates.dashboard[ctx.scene.session.interface_ln], callback_data: "dashboard" }],
            ]
        }
    }

    let message: any = {
        russian: `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`,
        buryat: `–ë—É—Ä—è–¥ —Ö—ç–ª—ç–Ω—ç –∑–∞–∞–±–∞—Ä–∏ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–≠—Ö–∏–ª—Ö–∏–∏–Ω, –Ω—ç–≥—ç —é—É–º—ç –¥–∞—Ä–∞–≥—Ç—ã`,
        english: `Buryat Language Tutorial \n\nEvery interaction with the bot affects the preservation and further development of the Buryat language \n\nChoose a section to start`,
    }

    try {
        
        if (reply) {
            return ctx.reply(message[ctx.scene.session.interface_ln], extra)
        }

        // ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
        ctx.updateType === 'callback_query' ? await ctx.editMessageText(message[ctx.scene.session.interface_ln], extra) : ctx.reply(message[ctx.scene.session.interface_ln],extra)

    } catch (err) {
    
        console.log(err)
    
    }
}

home.start(async (ctx: rlhubContext) => {

    let ref_user: number = 0

    if (ctx.startPayload) {

        ref_user = parseFloat(ctx.startPayload.replace('ref_', ''))
        
    }

    // await 

    try {

        let document: IUser | null = await User.findOne({
            id: ctx.from?.id
        })

        if (!document) {

            if (ctx.from) {

                const user: IUser = {
                    id: ctx.from.id,
                    username: ctx.from.username,
                    first_name: ctx.from.first_name,
                    translations: [],
                    voted_translations: [],
                    rating: 0,
                    is_bot: false,
                    supported: 0,
                    permissions: {
                        admin: true,
                        translation_moderator: true,
                        sentences_moderator: true,
                        dictionary_moderator: true
                    },
                }
                await new User(user).save().catch(err => {
                    console.log(err)
                })
                await greeting(ctx)
            }

        } else {
            await greeting(ctx)
        }

    } catch (err) {
        console.log(err)
    }
});

home.action("vocabular", async (ctx) => {
    ctx.answerCbQuery()
    return ctx.scene.enter('vocabular')
})

home.action("sentences", async (ctx) => {
    return ctx.scene.enter('sentences')
})

home.action("translater", async (ctx) => {

    let message: string = `<b>–ü–ª–∞–Ω –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n`
    message += `<a href="https://telegra.ph/Znachimost-Mashinnogo-Perevodchika-dlya-Buryatskogo-YAzyka-09-01">–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞–¥ —á–µ–º –º—ã –∏ —Ä–∞–±–æ—Ç–∞–µ–º</a>\n`

    await ctx.editMessageText(message, { parse_mode: 'HTML', disable_web_page_preview: true })
    await greeting(ctx, true)
    return ctx.answerCbQuery('–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')

})

home.action("study", async (ctx) => {
    console.log('study')
    return ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
})

home.action("moderation", async (ctx) => {
    try {

        if (ctx.updateType === 'callback_query') {


            const user: IUser | null = await User.findOne({ id: ctx.from?.id })

            if (user?.permissions?.admin || user?.permissions?.dictionary_moderator || user?.permissions?.sentences_moderator || user?.permissions?.translation_moderator) {

                ctx.answerCbQuery('–ï—Å—Ç—å –ø—Ä–∞–≤–∞!')
                return ctx.scene.enter('moderation')
                
            } else {
                
                ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
                await ctx.editMessageText('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @frntdev')
                await delay(1500)
                return await greeting(ctx, true)

            }

        }

    } catch (error) {
        console.error(error)
    }

    // ctx.answerCbQuery()
    // return ctx.scene.enter('moderation')
})

async function delay (ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms))
}

home.action("chatgpt", async (ctx) => {
    ctx.answerCbQuery()
    return ctx.scene.enter('chatgpt')
})

home.action("dashboard", async (ctx) => {
    await ctx.answerCbQuery('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    return ctx.scene.enter('dashboard')
})

home.enter(async (ctx) => { return await greeting(ctx) })

home.command('add_sentences', async (ctx) => {
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º')
    ctx.wizard.selectStep(1)
})

home.command("reset_activet", async (ctx) => {
    await Sentence.updateMany({
        active_translator: []
    })
})


async function add_sentences_handler (ctx: rlhubContext) {

    if (ctx.from) {
        try {

            if (ctx.updateType === 'callback_query') {
                if (ctx.callbackQuery) {

                    // @ts-ignore
                    if (ctx.callbackQuery.data) {

                        // @ts-ignore
                        let data: 'send_sentences' | 'back' = ctx.callbackQuery.data

                        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                        if (data === 'send_sentences') {
                            
                            for (let i = 0; i < ctx.session.sentences.length; i++) {
                            
                                new Sentence({
                                    text: ctx.session.sentences[i],
                                    author: ctx.from.id,
                                    accepted: 'not view',
                                    translations: [],
                                    skipped_by: []
                                }).save().then(async (data) => {
                                    let object_id = data._id

                                    await User.findOneAndUpdate({ id: ctx.from?.id }, { $push: {
                                        "proposedProposals": object_id
                                    } })

                                })

                            }

                            await ctx.answerCbQuery(`${ctx.session.sentences} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–ø–∞—Å–∏–±–æ!`)
                            ctx.wizard.selectStep(0)
                            await greeting(ctx)
                        }

                        if (data === 'back') {
                            ctx.wizard.selectStep(0)
                            await ctx.answerCbQuery()
                            return greeting(ctx)
                        }
                    }
                 }

            } else if (ctx.updateType === 'message') {

                if (ctx.update.message.text) {

                    let text: string = ctx.update.message.text

                    const user: IUser | null = await User.findOne({ id: ctx.from.id })
                    
                    if (!user || !user._id) {
                        return false
                    }

                    let sentence: ISentence = {
                        text: text.toLocaleLowerCase(),
                        author: user._id,
                        accepted: 'not view',
                        translations: [],
                        skipped_by: [],
                        active_translator: []
                    }

                    let message: string = ``

                    if (sentence.text.indexOf('+;') !== -1) {
                        let splitted = sentence.text.split('+;')
                        let arr: string[] = []
                        for (let i = 0; i < splitted.length; i++) {
                            arr.push(splitted[i].trimEnd().trimStart())
                        }

                        ctx.session.sentences = arr

                        for (let i = 0; i < splitted.length; i++) {
                            message += `${i+1}) ${splitted[i].trimStart().trimEnd()}\n`
                        }
                    } else {
                        ctx.session.sentences = [text]
                        message += text
                    }

                    await ctx.reply(message, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                        callback_data: 'send_sentences'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–∞–¥',
                                        callback_data: 'back'
                                    }
                                ]
                            ]
                        }
                    })

                } else {
                    await ctx.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ")
                }

            }

        } catch (err) {
            ctx.wizard.selectStep(0)
            await greeting(ctx)
        }
    }
    
}

// home.on("message", async (ctx) => await greeting (ctx))
home.action(/\./, async (ctx) => {
    
    console.log(ctx)
    await greeting(ctx)

})
export default home
export { add_sentences_handler }